boost::ext::sml::v1_1_4::aux::pool<>::pool(Ts&& ...) [with Ts = {boost::ext::sml::v1_1_4::aux::init, boost::ext::sml::v1_1_4::aux::pool<>}]

boost::ext::sml::v1_1_4::aux::missing_ctor_parameter<T> boost::ext::sml::v1_1_4::aux::try_get(...) [with T = {anonymous}::hello_world]

auto boost::ext::sml::v1_1_4::front::event<TEvent>::operator/(const T&) const [with T = {anonymous}::<lambda()>; typename boost::ext::sml::v1_1_4::aux::enable_if<boost::ext::sml::v1_1_4::concepts::callable<void, T>::value, int>::type <anonymous> = 0; TEvent = {anonymous}::timeout]

auto boost::ext::sml::v1_1_4::front::state_impl<TState>::operator+(const T&) const [with T = boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; TState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::front::internal>, boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::event<E>, boost::ext::sml::v1_1_4::front::always, A>::transition(const boost::ext::sml::v1_1_4::front::always&, const A&) [with S2 = boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'>; E = {anonymous}::timeout; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<E>, A> >::transition(const boost::ext::sml::v1_1_4::front::state<T>&, const boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<E>, A>&) [with S2 = boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'>; E = {anonymous}::timeout; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

auto boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<E>, A> >::operator=(const T&) const [with T = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>; S2 = boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'>; E = {anonymous}::timeout; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::state<S2>, boost::ext::sml::v1_1_4::front::event<E>, boost::ext::sml::v1_1_4::front::always, A>::transition(const boost::ext::sml::v1_1_4::front::always&, const A&) [with S1 = boost::ext::sml::v1_1_4::back::terminate_state; S2 = boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'>; E = {anonymous}::timeout; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

auto boost::ext::sml::v1_1_4::front::event<TEvent>::operator[](const T&) const [with T = {anonymous}::<lambda(const {anonymous}::fin&)>; typename boost::ext::sml::v1_1_4::aux::enable_if<boost::ext::sml::v1_1_4::concepts::callable<bool, T>::value, int>::type <anonymous> = 0; TEvent = {anonymous}::fin]

auto boost::ext::sml::v1_1_4::front::transition_eg<boost::ext::sml::v1_1_4::front::event<E>, G>::operator/(const T&) const [with T = {anonymous}::<lambda()>; E = {anonymous}::fin; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>]

auto boost::ext::sml::v1_1_4::front::state_impl<TState>::operator+(const T&) const [with T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; TState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::front::internal>, boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::event<E>, G, A>::transition(const G&, const A&) [with S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'>; E = {anonymous}::fin; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::event<E>, G, A> >::transition(const boost::ext::sml::v1_1_4::front::state<T>&, const boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::event<E>, G, A>&) [with S1 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'>; E = {anonymous}::fin; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

auto boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::event<E>, G, A> >::operator=(const T&) const [with T = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >; S1 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'>; E = {anonymous}::fin; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::state<S2>, boost::ext::sml::v1_1_4::front::event<E>, G, A>::transition(const G&, const A&) [with S1 = boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'>; S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'>; E = {anonymous}::fin; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

auto boost::ext::sml::v1_1_4::front::event<TEvent>::operator[](const T&) const [with T = {anonymous}::<lambda(const {anonymous}::ack&)>; typename boost::ext::sml::v1_1_4::aux::enable_if<boost::ext::sml::v1_1_4::concepts::callable<bool, T>::value, int>::type <anonymous> = 0; TEvent = {anonymous}::ack]

auto boost::ext::sml::v1_1_4::front::state_impl<TState>::operator+(const T&) const [with T = boost::ext::sml::v1_1_4::front::transition_eg<boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void> >; TState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::front::internal>, boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::event<E>, G, boost::ext::sml::v1_1_4::front::none>::transition(const G&, const boost::ext::sml::v1_1_4::front::none&) [with S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'>; E = {anonymous}::ack; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition_eg<boost::ext::sml::v1_1_4::front::event<E>, G> >::transition(const boost::ext::sml::v1_1_4::front::state<T>&, const boost::ext::sml::v1_1_4::front::transition_eg<boost::ext::sml::v1_1_4::front::event<E>, G>&) [with S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'>; E = {anonymous}::ack; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>]

auto boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition_eg<boost::ext::sml::v1_1_4::front::event<E>, G> >::operator=(const T&) const [with T = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >; S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'>; E = {anonymous}::ack; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::state<S2>, boost::ext::sml::v1_1_4::front::event<E>, G, boost::ext::sml::v1_1_4::front::none>::transition(const G&, const boost::ext::sml::v1_1_4::front::none&) [with S1 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'>; S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'>; E = {anonymous}::ack; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>]

auto boost::ext::sml::v1_1_4::front::event<TEvent>::operator/(const T&) const [with T = {anonymous}::<lambda()>; typename boost::ext::sml::v1_1_4::aux::enable_if<boost::ext::sml::v1_1_4::concepts::callable<void, T>::value, int>::type <anonymous> = 0; TEvent = {anonymous}::release]

auto boost::ext::sml::v1_1_4::front::state_impl<TState>::operator+(const T&) const [with T = boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; TState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::front::internal>, boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::event<E>, boost::ext::sml::v1_1_4::front::always, A>::transition(const boost::ext::sml::v1_1_4::front::always&, const A&) [with S2 = boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state); E = {anonymous}::release; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<E>, A> >::transition(const boost::ext::sml::v1_1_4::front::state<T>&, const boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<E>, A>&) [with S2 = boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state); E = {anonymous}::release; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

auto boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::transition_ea<boost::ext::sml::v1_1_4::front::event<E>, A> >::operator=(const T&) const [with T = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >; S2 = boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state); E = {anonymous}::release; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::state<S2>, boost::ext::sml::v1_1_4::front::event<E>, boost::ext::sml::v1_1_4::front::always, A>::transition(const boost::ext::sml::v1_1_4::front::always&, const A&) [with S1 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'>; S2 = boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state); E = {anonymous}::release; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>]

boost::ext::sml::v1_1_4::aux::pool<Ts>::pool(Ts ...) [with Ts = {boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>, boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>, boost::ext::sml::v1_1_4::front::none>, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >}]

boost::ext::sml::v1_1_4::aux::pool<Ts>::pool(const boost::ext::sml::v1_1_4::aux::pool<TArgs ...>&) [with TArgs = {}; Ts = {boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >}]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

boost::ext::sml::v1_1_4::back::on_entry<T, TEvent>::on_entry(const TEvent&) [with T = boost::ext::sml::v1_1_4::back::_; TEvent = boost::ext::sml::v1_1_4::back::initial]

const T& boost::ext::sml::v1_1_4::aux::cget(const TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

static bool boost::ext::sml::v1_1_4::back::transitions<T>::execute(const TEvent&, SM&, TDeps&, TSubs&, typename SM::state_t&) [with TEvent = {anonymous}::release; SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>, boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; typename SM::state_t = unsigned char]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>, boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>, boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>, boost::ext::sml::v1_1_4::front::none>, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> > >]

void boost::ext::sml::v1_1_4::front::update_current_state(SM&, TDeps&, TSubs&, typename SM::state_t&, const typename SM::state_t&, const TSrcState&, const TDstState&) [with SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; TSrcState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'> >; TDstState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >; typename SM::state_t = unsigned char]

const T& boost::ext::sml::v1_1_4::aux::cget(const TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

static bool boost::ext::sml::v1_1_4::back::transitions<T>::execute(const TEvent&, SM&, TDeps&, TSubs&, typename SM::state_t&) [with TEvent = {anonymous}::ack; SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>, boost::ext::sml::v1_1_4::front::none>; typename SM::state_t = unsigned char]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>, boost::ext::sml::v1_1_4::front::none>; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>, boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>, boost::ext::sml::v1_1_4::front::none>, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> > >]

static auto boost::ext::sml::v1_1_4::front::call<TEvent, boost::ext::sml::v1_1_4::aux::type_list<TArgs ...>, boost::ext::sml::v1_1_4::back::no_policy>::execute(T, const TEvent&, TSM&, TDeps&, TSubs&) [with T = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>; TSM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; TEvent = {anonymous}::ack; Ts = {const {anonymous}::ack&}]

bool boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::state<S2>, boost::ext::sml::v1_1_4::front::event<E>, G, boost::ext::sml::v1_1_4::front::none>::execute(const TEvent&, SM&, TDeps&, TSubs&, typename SM::state_t&, boost::ext::sml::v1_1_4::aux::false_type) [with TEvent = {anonymous}::ack; SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; S1 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'>; S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'>; E = {anonymous}::ack; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>; typename SM::state_t = unsigned char; boost::ext::sml::v1_1_4::aux::false_type = boost::ext::sml::v1_1_4::aux::integral_constant<bool, false>]

void boost::ext::sml::v1_1_4::front::update_current_state(SM&, TDeps&, TSubs&, typename SM::state_t&, const typename SM::state_t&, const TSrcState&, const TDstState&) [with SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; TSrcState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >; TDstState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >; typename SM::state_t = unsigned char]

const T& boost::ext::sml::v1_1_4::aux::cget(const TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

static bool boost::ext::sml::v1_1_4::back::transitions<T>::execute(const TEvent&, SM&, TDeps&, TSubs&, typename SM::state_t&) [with TEvent = {anonymous}::fin; SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; typename SM::state_t = unsigned char]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>, boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>, boost::ext::sml::v1_1_4::front::none>, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> > >]

bool boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<T>, boost::ext::sml::v1_1_4::front::state<S2>, boost::ext::sml::v1_1_4::front::event<E>, G, A>::execute(const TEvent&, SM&, TDeps&, TSubs&, typename SM::state_t&, boost::ext::sml::v1_1_4::aux::false_type) [with TEvent = {anonymous}::fin; SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; S1 = boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'>; S2 = boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'>; E = {anonymous}::fin; G = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>; A = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void>; typename SM::state_t = unsigned char; boost::ext::sml::v1_1_4::aux::false_type = boost::ext::sml::v1_1_4::aux::integral_constant<bool, false>]

static auto boost::ext::sml::v1_1_4::front::call<TEvent, boost::ext::sml::v1_1_4::aux::type_list<TArgs ...>, boost::ext::sml::v1_1_4::back::no_policy>::execute(T, const TEvent&, TSM&, TDeps&, TSubs&) [with T = boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>; TSM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; TEvent = {anonymous}::fin; Ts = {const {anonymous}::fin&}]

void boost::ext::sml::v1_1_4::front::update_current_state(SM&, TDeps&, TSubs&, typename SM::state_t&, const typename SM::state_t&, const TSrcState&, const TDstState&) [with SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; TSrcState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >; TDstState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >; typename SM::state_t = unsigned char]

const T& boost::ext::sml::v1_1_4::aux::cget(const TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

static bool boost::ext::sml::v1_1_4::back::transitions<T>::execute(const TEvent&, SM&, TDeps&, TSubs&, typename SM::state_t&) [with TEvent = {anonymous}::timeout; SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; typename SM::state_t = unsigned char]

T& boost::ext::sml::v1_1_4::aux::get(TPool&) [with T = boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'e', 's', 't', 'a', 'b', 'l', 'i', 's', 'h', 'e', 'd'>(boost::ext::sml::v1_1_4::front::initial_state)>, boost::ext::sml::v1_1_4::front::event<{anonymous}::release>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '1'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::ack>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::ack&)>, void>, boost::ext::sml::v1_1_4::front::none>, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 'f', 'i', 'n', ' ', 'w', 'a', 'i', 't', ' ', '2'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::fin>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda(const {anonymous}::fin&)>, void>, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> >, boost::ext::sml::v1_1_4::front::transition<boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>, boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >, boost::ext::sml::v1_1_4::front::event<{anonymous}::timeout>, boost::ext::sml::v1_1_4::front::always, boost::ext::sml::v1_1_4::aux::zero_wrapper<{anonymous}::<lambda()>, void> > >]

void boost::ext::sml::v1_1_4::front::update_current_state(SM&, TDeps&, TSubs&, typename SM::state_t&, const typename SM::state_t&, const TSrcState&, const TDstState&) [with SM = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TDeps = boost::ext::sml::v1_1_4::aux::pool<>; TSubs = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >; TSrcState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::aux::string<char, 't', 'i', 'm', 'e', 'd', ' ', 'w', 'a', 'i', 't'> >; TDstState = boost::ext::sml::v1_1_4::front::state<boost::ext::sml::v1_1_4::back::terminate_state>; typename SM::state_t = unsigned char]

const T& boost::ext::sml::v1_1_4::aux::cget(const TPool&) [with T = boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> >; TPool = boost::ext::sml::v1_1_4::aux::pool<boost::ext::sml::v1_1_4::back::sm_impl<boost::ext::sml::v1_1_4::back::sm_policy<{anonymous}::hello_world> > >]

